// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	valueobject "github.com/scul0405/saga-orchestration/services/account/internal/domain/valueobject"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// GetCustomerDeliveryInfo mocks base method.
func (m *MockCustomerRepository) GetCustomerDeliveryInfo(ctx context.Context, customerID uint64) (*valueobject.CustomerDeliveryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerDeliveryInfo", ctx, customerID)
	ret0, _ := ret[0].(*valueobject.CustomerDeliveryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerDeliveryInfo indicates an expected call of GetCustomerDeliveryInfo.
func (mr *MockCustomerRepositoryMockRecorder) GetCustomerDeliveryInfo(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerDeliveryInfo", reflect.TypeOf((*MockCustomerRepository)(nil).GetCustomerDeliveryInfo), ctx, customerID)
}

// GetCustomerPersonalInfo mocks base method.
func (m *MockCustomerRepository) GetCustomerPersonalInfo(ctx context.Context, customerID uint64) (*valueobject.CustomerPersonalInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerPersonalInfo", ctx, customerID)
	ret0, _ := ret[0].(*valueobject.CustomerPersonalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerPersonalInfo indicates an expected call of GetCustomerPersonalInfo.
func (mr *MockCustomerRepositoryMockRecorder) GetCustomerPersonalInfo(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerPersonalInfo", reflect.TypeOf((*MockCustomerRepository)(nil).GetCustomerPersonalInfo), ctx, customerID)
}

// UpdateCustomerDeliveryInfo mocks base method.
func (m *MockCustomerRepository) UpdateCustomerDeliveryInfo(ctx context.Context, customerID uint64, deliveryInfo *valueobject.CustomerDeliveryInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerDeliveryInfo", ctx, customerID, deliveryInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomerDeliveryInfo indicates an expected call of UpdateCustomerDeliveryInfo.
func (mr *MockCustomerRepositoryMockRecorder) UpdateCustomerDeliveryInfo(ctx, customerID, deliveryInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerDeliveryInfo", reflect.TypeOf((*MockCustomerRepository)(nil).UpdateCustomerDeliveryInfo), ctx, customerID, deliveryInfo)
}

// UpdateCustomerPersonalInfo mocks base method.
func (m *MockCustomerRepository) UpdateCustomerPersonalInfo(ctx context.Context, customerID uint64, personalInfo *valueobject.CustomerPersonalInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerPersonalInfo", ctx, customerID, personalInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomerPersonalInfo indicates an expected call of UpdateCustomerPersonalInfo.
func (mr *MockCustomerRepositoryMockRecorder) UpdateCustomerPersonalInfo(ctx, customerID, personalInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerPersonalInfo", reflect.TypeOf((*MockCustomerRepository)(nil).UpdateCustomerPersonalInfo), ctx, customerID, personalInfo)
}
