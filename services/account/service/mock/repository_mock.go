// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	"github.com/scul0405/saga-orchestration/services/account/domain/entity"
	valueobject2 "github.com/scul0405/saga-orchestration/services/account/domain/valueobject"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// GetCustomerDeliveryInfo mocks base method.
func (m *MockCustomerRepository) GetCustomerDeliveryInfo(ctx context.Context, customerID uint64) (*valueobject2.CustomerDeliveryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerDeliveryInfo", ctx, customerID)
	ret0, _ := ret[0].(*valueobject2.CustomerDeliveryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerDeliveryInfo indicates an expected call of GetCustomerDeliveryInfo.
func (mr *MockCustomerRepositoryMockRecorder) GetCustomerDeliveryInfo(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerDeliveryInfo", reflect.TypeOf((*MockCustomerRepository)(nil).GetCustomerDeliveryInfo), ctx, customerID)
}

// GetCustomerPersonalInfo mocks base method.
func (m *MockCustomerRepository) GetCustomerPersonalInfo(ctx context.Context, customerID uint64) (*valueobject2.CustomerPersonalInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerPersonalInfo", ctx, customerID)
	ret0, _ := ret[0].(*valueobject2.CustomerPersonalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerPersonalInfo indicates an expected call of GetCustomerPersonalInfo.
func (mr *MockCustomerRepositoryMockRecorder) GetCustomerPersonalInfo(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerPersonalInfo", reflect.TypeOf((*MockCustomerRepository)(nil).GetCustomerPersonalInfo), ctx, customerID)
}

// UpdateCustomerDeliveryInfo mocks base method.
func (m *MockCustomerRepository) UpdateCustomerDeliveryInfo(ctx context.Context, customerID uint64, deliveryInfo *valueobject2.CustomerDeliveryInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerDeliveryInfo", ctx, customerID, deliveryInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomerDeliveryInfo indicates an expected call of UpdateCustomerDeliveryInfo.
func (mr *MockCustomerRepositoryMockRecorder) UpdateCustomerDeliveryInfo(ctx, customerID, deliveryInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerDeliveryInfo", reflect.TypeOf((*MockCustomerRepository)(nil).UpdateCustomerDeliveryInfo), ctx, customerID, deliveryInfo)
}

// UpdateCustomerPersonalInfo mocks base method.
func (m *MockCustomerRepository) UpdateCustomerPersonalInfo(ctx context.Context, customerID uint64, personalInfo *valueobject2.CustomerPersonalInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerPersonalInfo", ctx, customerID, personalInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomerPersonalInfo indicates an expected call of UpdateCustomerPersonalInfo.
func (mr *MockCustomerRepositoryMockRecorder) UpdateCustomerPersonalInfo(ctx, customerID, personalInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerPersonalInfo", reflect.TypeOf((*MockCustomerRepository)(nil).UpdateCustomerPersonalInfo), ctx, customerID, personalInfo)
}

// MockJWTAuthRepository is a mock of JWTAuthRepository interface.
type MockJWTAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJWTAuthRepositoryMockRecorder
}

// MockJWTAuthRepositoryMockRecorder is the mock recorder for MockJWTAuthRepository.
type MockJWTAuthRepositoryMockRecorder struct {
	mock *MockJWTAuthRepository
}

// NewMockJWTAuthRepository creates a new mock instance.
func NewMockJWTAuthRepository(ctrl *gomock.Controller) *MockJWTAuthRepository {
	mock := &MockJWTAuthRepository{ctrl: ctrl}
	mock.recorder = &MockJWTAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTAuthRepository) EXPECT() *MockJWTAuthRepositoryMockRecorder {
	return m.recorder
}

// CheckCustomer mocks base method.
func (m *MockJWTAuthRepository) CheckCustomer(ctx context.Context, customerID uint64) (bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCustomer", ctx, customerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckCustomer indicates an expected call of CheckCustomer.
func (mr *MockJWTAuthRepositoryMockRecorder) CheckCustomer(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCustomer", reflect.TypeOf((*MockJWTAuthRepository)(nil).CheckCustomer), ctx, customerID)
}

// CreateCustomer mocks base method.
func (m *MockJWTAuthRepository) CreateCustomer(ctx context.Context, customer *entity.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockJWTAuthRepositoryMockRecorder) CreateCustomer(ctx, customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockJWTAuthRepository)(nil).CreateCustomer), ctx, customer)
}

// GetCustomerCredentials mocks base method.
func (m *MockJWTAuthRepository) GetCustomerCredentials(ctx context.Context, email string) (bool, *valueobject2.CustomerCredentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerCredentials", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*valueobject2.CustomerCredentials)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCustomerCredentials indicates an expected call of GetCustomerCredentials.
func (mr *MockJWTAuthRepositoryMockRecorder) GetCustomerCredentials(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerCredentials", reflect.TypeOf((*MockJWTAuthRepository)(nil).GetCustomerCredentials), ctx, email)
}
